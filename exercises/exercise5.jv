pipeline GTFSPipeline {
    GTFSExtractor
        ->ZipArchiveInterpreter
        -> GTFSFilePicker
        -> GTFSTextFileInterpreter
        -> GTFSCsvInterpreter
        -> GTFSTableInterpreter
        -> GTFSLoader;

    // Extract file from url
    block GTFSExtractor oftype HttpExtractor {
    url:"https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }
    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block GTFSFilePicker oftype FilePicker {
        path: "/stops.txt";
    }

    // I ensure that german umlauts are saved correctly
    block GTFSTextFileInterpreter oftype TextFileInterpreter {
        encoding: "utf8";
    }

    block GTFSCsvInterpreter oftype CSVInterpreter {
        delimiter: ',';
        enclosingEscape: '"';
        enclosing: '"'; 
    }
    
    block GTFSTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype GeoCoordinateRange,
            "stop_lon" oftype GeoCoordinateRange,
            "zone_id" oftype ZoneConstratin,
        ];
    }
    // keeps stops from zone 1645
    valuetype ZoneConstratin oftype integer{
        constraints: [ZoneIDConstraint];
    }

    constraint ZoneIDConstraint on integer:
        value == 1645;


    //stop_lat/stop_lon must be a geographic coordinates between -90 and 90, including upper/lower bounds
    valuetype GeoCoordinateRange oftype decimal {
        constraints: [GeoCoordinate];
        }

    constraint GeoCoordinate oftype RangeConstraint {
        lowerBound: -90;
        lowerBoundInclusive: true;
        upperBound: 90;
        upperBoundInclusive: true;
        }


    // save data
    block GTFSLoader oftype SQLiteLoader {
        table: "stops";
        file: "gtfs.sqlite";
    }
}